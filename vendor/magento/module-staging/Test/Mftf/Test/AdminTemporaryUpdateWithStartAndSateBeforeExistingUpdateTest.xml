<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

 <tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="AdminTemporaryUpdateWithStartAndSateBeforeExistingUpdateTest">
        <annotations>
            <title value="Temporary Update with start and end date before existing update."/>
            <description value="Temporary Update with start and end date before existing update."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-77959"/>
            <group value="staging"/>
        </annotations>
        <before>
            <!--Create Simple Product and Category-->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="ApiProductWithDescription" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">10</field>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <!-- Create storeView -->
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreView"/>
            <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGridPage"/>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductFilters"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Open Product Grid, Filter product and open -->
        <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="filterGroupedProductOptions">
            <argument name="product" value="ApiProductWithDescription"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.productGridXRowYColumnButton('1', '2')}}" stepKey="openProductForEdit"/>
        <!-- Create Schedule New Update -->
        <click selector="{{AdminStagingSlideOutSection.scheduleNewUpdateBtn}}" stepKey="clickButtonSheduleNewUpdate"/>
        <waitForPageLoad time="30" stepKey="waitForPageLoad1"/>
        <click selector="{{AdminStagingSlideOutSection.changeStoreButton}}" stepKey="clickStoreSwitcher"/>
        <click selector="{{AdminStagingSlideOutSection.selectStoreView(customStore.name)}}" stepKey="clickStoreView"/>
        <click selector="{{AdminConfirmationModalSection.ok}}" stepKey="acceptMessage"/>
        <waitForPageLoad time="30" stepKey="waitForPageLoad2"/>
        <actionGroup ref="FillScheduleUpdateActionGroup" stepKey="createScheduleUpdate">
            <argument name="staging" value="S5UpdateNameStaging"/>
        </actionGroup>
        <!-- Create Schedule New Update1 -->
        <click selector="{{AdminStagingSlideOutSection.scheduleNewUpdateBtn}}" stepKey="clickButtonSheduleNewUpdate1"/>
        <waitForPageLoad time="30" stepKey="waitForPageLoad3"/>
        <actionGroup ref="FillScheduleUpdateActionGroup" stepKey="createScheduleUpdate1">
            <argument name="staging" value="S8UpdateNameStaging"/>
        </actionGroup>
    </test>
</tests>
